#!/bin/bash

#Color codes abbreviations
RED='\033[0;31m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'

#Read an answer from user
function read_answer(){
	while true; do
			read -p "$(echo -e "$1")" yn
		case $yn in
			[Yy]* ) answer=true; break;;
			[Nn]* ) answer=false; break;;
			* ) echo "Please answer yes or no.";;
		esac
	done
	echo $answer
}

function check_pymod(){
    if ! pip3 list | grep -F "$1" &> /dev/null

    then
        echo -e "${RED}ERROR: Python module $1 not found. \u2716${NC}\n"
        missing_reqs+=("$1")
    else
        echo -e "${GREEN}Found "$(pip3 list | grep -F "$1")" \u2714${NC}\n"
    fi
}

function check_cpplib(){
    templibname="$(whereis "lib$1.so")"
    readarray -d ' ' -t strarr <<< $templibname 
    if [ "${#strarr[@]}" -le 1 ]
    then
        echo -e "${RED}ERROR: Library $1 not found. \u2716${NC}\n"
        missing_reqs+=("$1")
    else
        echo -e "${GREEN}Found "${strarr[${#strarr[@]} - 1]}" \u2714${NC}\n"
    fi
}

inst_path="/usr/local/bin/"
new_path=false
install_missing=false
python_include="/usr/include"
python_lib="/usr/lib"
boost_lib="/usr/local/lib"
boost_include="/usr/local/include"
#Scan the command line arguments
for i in "$@"; do
  case $i in
	-p=*|--prefix=*)
	  inst_path="${i#*=}"
	  new_path=true
		shift;;
	-i=*|--install-missing=*)
		install_missing="${i#*=}"
		shift;;
	-bi=*|--boost-include=*)
		boost_include="${i#*=}"
		shift;;
	-bl=*|--boost-lib=*)
		boost_lib="${i#*=}"
		shift;;
	-pi=*|--python-include=*)
		python_include="${i#*=}"
		shift;;
	-bl=*|--python-lib=*)
		python_lib="${i#*=}"
		shift;;
	-*|--*)
	  echo -e "${RED}Unknown Argument: $i${NC}\n"
	  exit 1;;
	*)
	  ;;
  esac
done

echo -e "\nStarting the configuration of the Lammps Automator\n"
#Check all the requirements

echo -e "Checking all the requirements...\n"

declare -a missing_reqs=()

#Python3
if ! command -v python3 &> /dev/null
then
	if ! command -v python2 &> /dev/null
	then
		echo -e "${RED}ERROR: No python installed. \u2716${NC}\\nPlease install Python3"
	else
		python2_version=$(python2 -V 2>&1)
		echo -e "${RED}ERROR: Python3 not found. \u2716${NC}\nLatest version of python is $python2_version\nPlease install python3\n"
		unset python2_version
	fi
	missing_reqs+=("python3")
else
	echo -e "${GREEN}Found $(python3 --version) \u2714${NC}\n"
    readarray -d ' ' -t strarr <<< "$(python3 --version)"
    readarray -d '.' -t strarr <<< "${strarr[1]}"
    echo "${strarr[0]}.${strarr[1]}" >> .pyver.txt
fi

#pip3
if ! command -v pip3 &> /dev/null
then
	echo -e "${RED}ERROR: pip3 not found. \u2716${NC}\n"
	missing_reqs+=("pip3")
else
	echo -e "${GREEN}Found $(pip3 --version) \u2714${NC}\n"
fi

#Nuitka
check_pymod "Nuitka"

#numpy
check_pymod "numpy"

#gmp
check_cpplib "gmp"

#ssl
check_cpplib "ssl"

#crypto
check_cpplib "crypto"



#Check that all of the requirements have been satisfied
if (( ${#missing_reqs[@]} > 0 ))
then
	echo -e "${RED}Some of the requirements have not been satisfied${NC}"
	echo -e "Missing requirements: ${missing_reqs[*]}\n"
	
	if ! $install_missing
	then
		if $( read_answer "Would you like to install the missing requirements?" )
		then
			install_missing=true
		fi
	fi
	if $install_missing
	then
		echo -e "Starting the requirements' installation tool\n"
		if [ -f "install_requirements" ]
		then
			./install_requirements "{$missing_reqs[*]}"
		elif [ -f "../install_requirements"]
		then
			../install_requirements "{$missing_reqs[*]}"
		else
			echo -e "${RED}ERROR: The requirement installation script has been moved.${NC} Please pull the repository again to acquire it.\n"
		exit
		fi
	else
		exit
	fi
else
	echo -e "${GREEN}All of the requriments are satisfied. Starting to build the binary files.${NC}\n"
fi

#boost
pv=$(cat .pyver.txt)
if [ -d "$boost_include/boost" ] && [ -f "$boost_lib/libboost_python"${pv/./}".so" ]
then
    echo -e "${GREEN}Boost has been correctly installed with python$(cat .pyver.txt) \u2714${NC}\n"
else
    echo -e "${RED}ERROR: Incorrect boost installation \u2716${NC}\n"

	if ! $install_missing
	then
		if $( read_answer "Would you like to install boost?" )
		then
			install_missing=true
		fi
	fi
	if $install_missing
    then
        if [ -f "install_boost" ]
        then
            ./install_boost
    #        echo "install boost"
        else
            if [ -f "../install_boost" ]
            then
                ../install_boost
    #            echo "install boost"
            else
                echo -e "${RED}ERROR: The boost installation script has been moved.${NC} Please pull the repository again to acquire it.\n"
            fi
        fi
    else
        exit
    fi
fi

#Compile the shortener class into a python module
if [ -f "cpp_part/shortener.cpp" ] && [ -f "cpp_part/shortener.hpp" ] && [ -f "cpp_part/shrt_lib.cpp" ]
then
    make -C "cpp_part" PYTHON_VERSION="$(cat .pyver.txt)" PYTHON_INC="$python_include" PYTHON_LIB="$python_lib" BOOST_INC="$boost_include" BOOST_LIB="$boost_lib"
else
    if [ -f "../cpp_part/shortener.cpp" ] && [ -f "../cpp_part/shortener.hpp" ] && [ -f "../cpp_part/shrt_lib.cpp" ]
    then
        make -C "../cpp_part" PYTHON_VERSION="$(cat .pyver.txt)" PYTHON_INC="$python_include" PYTHON_LIB="$python_lib" BOOST_INC="$boost_include" BOOST_LIB="$boost_lib"
    else
        echo -e "${RED}ERROR: Some of the shortener files have been moved. Please perform a git pull to acquire them.${NC}"
        exit
    fi
fi



#Compile python files
if [ -f "python_part/lmp_auto.py" ] && [ -f "python_part/CONSTANTS.py" ] && [ -f "python_part/DataGenerator.py" ] && [ -f "python_part/DataModifier.py" ] && [ -f "python_part/helper_functions.py" ] && [ -f "python_part/Logger.py" ]
then
	python3 -m nuitka --follow-imports python_part/lmp_auto.py 
else
if [ -f "../python_part/lmp_auto.py" ] && [ -f "../python_part/CONSTANTS.py" ] && [ -f "../python_part/DataGenerator.py" ] && [ -f "../python_part/DataModifier.py" ] && [ -f "../python_part/helper_functions.py" ] && [ -f "../python_part/Logger.py" ]
	then
		python3 -m nuitka --follow-imports ../python_part/lmp_auto.py 
	else
		echo -e "${RED}ERROR: Configure file is run from an incorrect directory.${NC}\nPlease run configure file from the build or main project folder.\n"
        exit
	fi
fi

if [ -f "lmp_auto.bin" ]
then
	echo -e "${GREEN}The binary file has been successfully created.${NC}\n"

	if ! $new_path
	then
		echo -e "You have not specified an installation directory.\nThe binary will be installed in $inst_path\n"
	else
		echo -e "The installation directory: $inst_path\n"
	fi


	inst_path="${inst_path/\~/$HOME}"
	if [ -d "$inst_path" ]
	then
		echo -e "${GREEN}Installation directory exists.${NC}\n"	
	else
		if $( read_answer "$(echo -e "${RED}Installation directory $inst_path not found.${NC} Would you like to create one?")" )
		then
			sudo mkdir -p $inst_path
		else
			exit
		fi
	fi

	if [ -z $(echo $PATH | grep -E "(:|^)${inst_path%/}:") ]
	then
		if $( read_answer "$(echo -e "Directory $inst_path is not int the \$PATH. Would you like to add it?")" )
		then
			echo PATH=$PATH:$inst_path >> ~/.bashrc
		fi
	fi
	sudo cp lmp_auto.bin $inst_path/lmp_auto
	
	echo -e "${GREEN}Lammps Auto has been successfully installed!${NC}\n" 

else
	echo -e "${RED}Something went wrong wile creating a binary file.${NC}\nPlease check for Nuitka errors.\n"
fi








